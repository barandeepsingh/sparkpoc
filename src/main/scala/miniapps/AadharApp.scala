package miniapps

import org.apache.spark.sql._

object AadharApp extends App {
  val spark = SparkSession.builder().master("local[*]").getOrCreate()

  spark.sparkContext.setLogLevel("WARN")

  import spark.implicits._

  val aadharDS = spark.read.option("header", "true").option("inferSchema", "true").csv("spark-data/aadhar.csv").as[Aadhaar]
  //Show report of Total Aadhaar's generated for each state
  val totalAadhaarGeneratedPerStateDF = spark.sql(
    """
      | SELECT state,
      |        SUM(aadhaarGenerated) as count
      | FROM aadhar_temp_view
      | GROUP BY state
      | ORDER BY count DESC""".stripMargin)

  aadharDS.createOrReplaceTempView("aadhar_temp_view")
  // Generate a report with Total Aadhaar's generated by each enrolment agency
  val maxEnrolmentAgencyDF = spark.sql(
    """
      | SELECT enrolmentAgency,
      |        SUM(aadhaarGenerated) as count
      | FROM aadhar_temp_view
      | GROUP BY enrolmentAgency
      | ORDER BY count DESC""".stripMargin)

  //println(totalAadhaarGeneratedPerStateDF.count)
  //totalAadhaarGeneratedPerStateDF.toJSON.collect.foreach(println)
  // Generate report for top 10 districts with maximum Aadhaar's generated for both Male and Female
  val districtWiseGenderCountDF = spark.sql(
    """
      | SELECT District,
      |        count(CASE WHEN Gender='M' THEN 1 END) as male_count,
      |        count(CASE WHEN Gender='F' THEN 1 END) as FEMALE_count
      | FROM aadhar_temp_view
      | GROUP BY District
      | ORDER BY male_count DESC, FEMALE_count DESC
      | LIMIT 10""".stripMargin)

  //maxEnrolmentAgencyDF.toJSON.collect.foreach(println)

  case class Aadhaar(registrar: String, enrolmentAgency: String, state: String, district: String, subDistrict: String, pinCode: String, gender: String, age: Integer, aadhaarGenerated: Int, enrolmentRejected: Int, providedEmail: Int, providedMobile: Int)

  districtWiseGenderCountDF.toJSON.collect.foreach(println)

}
